##Lectura de bases de datos
employee = "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/employee_survey_data.csv"
general= "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/general_data.csv"
in_time = "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/in_time.csv"
manager_survey= "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/manager_survey_data.csv"
out_time = "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/out_time.csv"
retirement= "https://github.com/diegol99/CasoEstudio_RRHH/blob/911c48768cf2eda82b9b5edbcb8c40f933e8244d/retirement_info.csv"

##Columna en común EmployeeID
df_employee=pd.read_csv(employee,sep= None,engine="python")
df_generaldt=pd.read_csv(general,sep= None,engine="python")
df_managers = pd.read_csv(manager_survey,sep= None,engine="python")
df_retire= pd.read_csv(retirement,sep= None,engine="python")
##Tiempos
df_intime=pd.read_csv(in_time,sep= None,engine="python")
df_outime = pd.read_csv(out_time,sep= None,engine="python")

#convertir columnas de todos los df a miniscula
def convertirmin(df):
    df.columns = map(str.lower,df.columns)
convertirmin(df_employee)
convertirmin(df_generaldt)
convertirmin(df_managers)
convertirmin(df_retire)
convertirmin(df_intime)
convertirmin(df_outime)

##Unión de bases de datos
df2= pd.merge(df_generaldt,df_employee,on="employeeid",how="inner")
df_final = pd.merge(df2,df_managers,on="employeeid",how="inner")
df_retir = pd.merge(df_final,df_retire,on="employeeid",how="right")

####### Análisis Exploratorio ##########

variables1 = df_final[["department","educationfield","gender"]]
for i in variables1:
    plt.figure(figsize= (12,9))
    sns.countplot(x= variables1[i])
 ##Análisis exploratorio

variables1 = df_final[["department","educationfield","gender"]]
for i in variables1:
    plt.figure(figsize= (12,9))
    sns.countplot(x= variables1[i])

##Información especifica 
##Departamento de recursos humanos es muy pequeño a comparación de los otros
import plotly.express as px
basepie= df_final.groupby(["department"])[["employeecount"]].count().sort_values('employeecount', ascending = False).reset_index()
empl = df_final["employeecount"].sum()

fig = px.pie(basepie, values = 'employeecount',names="department",hole= .5,
                color_discrete_sequence=px.colors.qualitative.G10)

fig.update_layout(
    template = 'simple_white',
    title_x = 0.5,
    annotations = [dict(text = str(empl), x=0.5, y = 0.5, font_size = 40, showarrow = False )])
fig.show()

##Número de capacitaciones de los empleados que se encuentran en la empresa ----> df_final
plt.figure(figsize = (14,9))
sns.countplot(data=df_final,x="department",hue="trainingtimeslastyear")

##Número de capacitaciones de los empleados que se encuentran en la empresa ----> df_retirados
plt.figure(figsize = (14,9))
sns.countplot(data=df_retir,x="department",hue="trainingtimeslastyear")

## Numero de capacitaciones de acuerdo a su satisfacción  df---->retirados
# Tabla de contingencia jobsatisfacion / capacitaciones
pd.crosstab(index=df_retir["jobsatisfaction"],
            columns=df_retir['trainingtimeslastyear'], margins=True)

**¿Cuál es el departamento con más empleados retirados según su nivel de trabajo?**

##Boxplot de las razones de retiro por departamento---> df retirados
fig = px.box(df_retir, x="resignationreason" , y='jobsatisfaction', color="department")
fig.update_traces(quartilemethod="exclusive") # or "inclusive", or "linear" by default
fig.show()

**¿La edad de los empleados influye en los ascensos?**

# Tabla de contingencia aumento o promocion /edad
pd.crosstab(index=df_final["age"],
            columns=df_final["yearssincelastpromotion"], margins=True)

# Tabla de contingencia años en la compañia / promocion
pd.crosstab(index=df_retir["yearssincelastpromotion"],
            columns=df_retir['yearsatcompany'], margins=True)

**¿Existe igualdad entre los salarios de hombres y mujeres?**

import plotly.express as px
df = df_final
fig = px.histogram(df, x="monthlyincome", color="gender")
fig.show()

###grafico años para ascendero ser jefe vs salario mensual
import plotly.express as px
df = df_final
fig = px.histogram(df, x="monthlyincome", color="yearswithcurrmanager")
fig.show()

#boxplot influencia de lo que ganan mensualmente vs su razón de salida por genero
fig = px.box(df_retir, x="resignationreason" , y='monthlyincome', color="gender")
fig.update_traces(quartilemethod="exclusive") # or "inclusive", or "linear" by default
fig.show()

**¿El número de capacitaciones en el último año influye en el salario mensual?**

#histohgrama relacion de salario mensual vs el numero de capacitaciones al año
df = df_final
fig = px.histogram(df, x="monthlyincome", color="trainingtimeslastyear")
fig.show()

# Tabla de contingencia departamento / capacitaciones ---> Df retirados
pd.crosstab(index=df_retir["department"],
            columns=df_retir['trainingtimeslastyear'], margins=True)

**¿Cuáles son los motivos por los que se retiraron los empleados de la empresa? ¿Esto tiene alguna relación con el número de capacitaciones que recibieron recientemente?**

# Tabla de contingencia Resignacion / capacitaciones
pd.crosstab(index=df_retir["resignationreason"],
            columns=df_retir['trainingtimeslastyear'], margins=True)

# Tabla de contingencia departamento/Eduacionfield ---> df_retirados
pd.crosstab(index=df_retir["department"],
            columns=df_retir["educationfield"], margins=True)

# Tabla de contingencia departamento/Eduacionfield ---> df_final
pd.crosstab(index=df_final["department"],
            columns=df_final["educationfield"], margins=True)

#Estudios de las personas y qué tanto están involucradas en el trabajo.
pd.crosstab(index=df_final['educationfield'],
            columns=df_final['jobinvolvement']).plot(kind='bar') 

####boxplot relacion de lo que ganan mensualmente vs su motivo de retiro por nivel de trabajo
fig = px.box(df_retir, x="resignationreason" , y='monthlyincome', color="joblevel")
fig.update_traces(quartilemethod="exclusive") # or "inclusive", or "linear" by default
fig.show()

**¿Existe alguna relación entre el nivel de trabajo y el nivel de satisfacción?**

# Tabla de contingencia Nivel de trabajo/nivel de satisfación <----Df final
pd.crosstab(index=df_final["joblevel"],
            columns=df_final["jobsatisfaction"], margins=True)

**¿Cuál es el nivel de satisfacción en cada área?**

# Tabla de contingencia education field/nivel de satisfacion <----df final 
pd.crosstab(index=df_final["educationfield"],
            columns=df_final["jobsatisfaction"], margins=True)

##Boxplo departamento vs nivel de satisfacion por genro df final
fig = px.box(df_final, x='department' , y="jobsatisfaction", color="gender")
fig.update_traces(quartilemethod="exclusive") # or "inclusive", or "linear" by default
fig.show()

**¿Las capacitaciones influyen en que los trabajadores asciendan de cargo?**

# Tabla de contingencia años dedsde la ultima promocion / capacitaciones
pd.crosstab(index=df_retir["yearssincelastpromotion"],
            columns=df_retir['trainingtimeslastyear'], margins=True)
            
 #######  Análisis Exploratorio: Df Retirados #########


1.   Revisar tiempo de capacitación. Esto puede afectar el rendimiento de los que se han retirado
2.   Buscar si las tareas asignadas al principio de la contratación son las mismas a la hora del retiro. Al poner trabajos adicionales, en diferente área y sin remuneración puede afectar.
3. Verificar los datos duplicados, atipicos.
4. Las personas que están asignando a los problemas,no tienen que ver con educación o area encargad



#dataset con solo los que se han retirado. Información completa
##Edad común de retiro ?
## Nivel de participación Jobinvolment
## Salario justificable? 
df_retir = pd.merge(df_final,df_retire,on="employeeid",how="right")
df_retir.columns = map(str.lower,df_retir.columns)

df_retir

df_retir.describe()

##Verificar esa clasificación de otras. Especificar que puede ser
df_retir["resignationreason"].value_counts()

**¿Las edad de los empleados influye en su retiro?**

pd.crosstab(index=df_retir['age'],
            columns=df_retir['retirementtype']).plot(kind='bar',stacked = True, rot=0, figsize=(15, 10))


##Mayor cantidad de personas están de acuerdo(365)--->> Muy a la par de las que no(341)
df_retir["environmentsatisfaction"].value_counts()

df_retir["numcompaniesworked"].value_counts()

##df con nulos
dfcon = df_retir.copy()
dfcon

## Distribución de la variable resignationreason, la cual, es la que contiene más datos nulos
def distribucion_variable_categorica(col):
    df_retir[col].value_counts(ascending=True,normalize=True).tail(20).plot.hist()
    plt.show()
distribucion_variable_categorica('resignationreason')

## Distribución de la variable resignationreason sin nulos
dfsin = df_retir.dropna()
def distribucion_variable_categorica1(col):
    dfsin[col].value_counts(normalize=True).tail(20).plot.hist()
    plt.show()
distribucion_variable_categorica1("resignationreason")

##No viajan mucho las personas que se retiraron
## El departamento de research & developmen es donde más se retiran, segundo ventas.
##Las personas que estudiaron ciencias de la vida y medicina son las que más se retiran
## se retiran más los hombres que las mujeres
##las personas abandonan el puesto m resignación
variables = dfcon[["department","educationfield","gender"]]
for i in variables:
    plt.figure(figsize= (12,9))
    sns.countplot(x= variables[i])

**¿Qué tanto estuvieron involucrados las personas retiradas en proyectos según sus estudios?**

pd.crosstab(index=df_retir['educationfield'],
            columns=df_retir['jobinvolvement']).plot(kind='bar') 

**¿Qué tan satisfechos estan los empleados por departamento?**

## Cantidad de personas segun su departamento y qué satisfechos están.
pd.crosstab(index=df_retir['department'],
            columns=df_retir['jobsatisfaction']).plot(kind='bar') 

## De los retirados de los diferentes departamentos, se realizaron de 2 a 3 capacitaciones
plt.figure(figsize = (14,9))
sns.countplot(data=df_retir,x="department",hue="trainingtimeslastyear")

## Porcentaje de empleados por departament
basepie= df_retir.groupby(["department"])[["employeecount"]].count().sort_values('employeecount', ascending = False).reset_index()
empl1 = df_retir["employeecount"].sum()

fig = px.pie(basepie, values = 'employeecount',names="department",hole= .5,
                color_discrete_sequence=px.colors.qualitative.G10)

fig.update_layout(
    template = 'simple_white',
    title_x = 0.5,
    annotations = [dict(text = str(empl1), x=0.5, y = 0.5, font_size = 40, showarrow = False )])
fig.show()

df_retir.columns

df_retir['retirementdate'] = pd.to_datetime(df_retir['retirementdate']) # Convertir la fecha en el formato correcto
df_retir["retirementdate"] = df_retir["retirementdate"].dt.month
retfecha= df_retir.groupby(["retirementdate"])[["employeecount"]].count().reset_index()
fig = px.line(retfecha, x='retirementdate', y =['employeecount'], title = '<b>Evolución de retiros de los empleados<b>',
              color_discrete_sequence=px.colors.qualitative.G10)
fig.update_layout(
    template = 'simple_white',
    title_x = 0.5,
    legend_title = 'Despidos:',
    xaxis_title = '<b>Fecha<b>',
    yaxis_title = '<b>Cantidad de casos<b>',
)

fig.show()

retfecha

